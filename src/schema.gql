# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Registros de propiedad intelectual que posee cada cancion"""
type IntellectualProperty {
  id: ID!
  title: String!
  track: Track!
  documentUrl: String!
  createdAt: String!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MusicalGenre {
  id: ID!
  genre: String!
  subGenre: [String!]
  tracks: [Track!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

"""Solicitudes enviadas por el usuario para el uso de las canciones"""
type RequestedTrack {
  id: ID!
  requester: User!
  track: Track!
  status: RequestsStatus!
  licenseType: LicenseType!
  approvedByRequester: Boolean!
  createdAt: String!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

"""Estado de las peticiones"""
enum RequestsStatus {
  APROBADA
  RECHAZADA
  PENDIENTE
}

"""Tipo de Licencia"""
enum LicenseType {
  LICENCIA_DE_PRIMER_USO
  LICENCIA_TRADUCCION
  LICENCIA_REPRODUCCION
  LICENCIA_SINCRONIZACION
}

type Track {
  id: ID!
  title: String!
  genre: MusicalGenre!
  subGenre: String
  cover: String
  url: String!
  language: String!
  lyric: String!
  externalsIds: [String!]
  intellectualProperties: [IntellectualProperty!]!
  isAvailable: Boolean!
  authors: User!
  playlists: Playlist
  isGospel: Boolean!

  """Listado de solicitudes de uso que ha recibido la cancion"""
  requestedTrack: [RequestedTrack!]
  createdAt: String!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

type Playlist {
  id: ID!
  title: String!
  owner: User!
  cover: String

  """usuarios invitados para hacer CRUD a la lista de reproducci√≥n """
  guests: [Guest!]
  tracks: [Track!]
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type Guest {
  id: ID!
  role: UserRole!
  invited_by: User!
  playlists: [Playlist!]
}

"""Roles de los usuarios"""
enum UserRole {
  ADMIN
  AUTOR
  INTERPRETE
  CANTAUTOR
  INVITADO
  EDITOR
}

type User {
  id: ID!
  name: String!
  lastName: String!
  email: String!
  password: String!
  countryCode: String
  phone: String
  typeCitizenID: String
  citizenID: String
  role: UserRole!
  avatar: String
  isVerified: Boolean!
  biography: String
  socialNetworks: [String!]
  tracks: Track
  guests: [Guest!]
  playlists: [Playlist!]
  requestSent: [RequestedTrack!]
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type Query {
  users: [User!]!
  user(id: ID!): User!
  tracks: [Track!]!
  track(id: String!): Track!
  playlists: [Playlist!]!
  playlist(id: ID!): Playlist!
  guests: [Guest!]!
  guest(id: ID!): Guest!
  requestedTracks: [RequestedTrack!]!
  requestedTrack(id: ID!): RequestedTrack!
  musicalGenres: [MusicalGenre!]!
  musicalGenre(id: ID!): MusicalGenre!
  intellectualProperty(id: String!): IntellectualProperty!
}

type Mutation {
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: ID!): User!
  createTrack(createTrackInput: CreateTrackInput!): Track!
  updateTrack(updateTrackInput: UpdateTrackInput!): Track!
  removeTrack(id: String!): Track!
  createPlaylistsResolver(createPlaylistInput: CreatePlaylistInput!): Playlist!
  updatePlaylistsResolver(updatePlaylistInput: UpdatePlaylistInput!): Playlist!
  removePlaylistsResolver(id: ID!): Playlist!
  createGuestResolver(createGuestInput: CreateGuestInput!): Guest!
  updateGuestResolver(updateGuestInput: UpdateGuestInput!): Guest!
  removeGuestResolver(id: ID!): Boolean!
  createRequestedTrackResolver(createRequestedTrackInput: CreateRequestedTrackInput!): RequestedTrack!
  updateRequestedTrackResolver(updateRequestedTrackInput: UpdateRequestedTrackInput!): RequestedTrack!
  removeRequestedTrackResolver(id: ID!): RequestedTrack!
  createMusicalGenreResolver(createMusicalGenreInput: CreateMusicalGenreInput!): MusicalGenre!
  updateMusicalGenreResolver(updateMusicalGenreInput: UpdateMusicalGenreInput!): MusicalGenre!
  removeMusicalGenreResolver(id: ID!): Boolean!
  createIntellectualProperty(createIntellectualPropertyInput: CreateIntellectualPropertyInput!): IntellectualProperty!
  updateIntellectualProperty(updateIntellectualPropertyInput: UpdateIntellectualPropertyInput!): IntellectualProperty!
  removeIntellectualProperty(id: String!): IntellectualProperty!
}

input UpdateUserInput {
  name: String
  lastName: String
  email: String
  password: String
  countryCode: String
  phone: String
  typeCitizenID: String
  citizenID: String
  role: UserRole
  avatar: String
  isVerified: Boolean
  biography: String
  socialNetworks: [String!]
  id: ID!
}

input CreateTrackInput {
  title: String!
  genreId: ID!
  subGenre: String
  cover: String
  url: String!
  language: String!
  lyric: String!
  externalsIds: [String!]
  authorsIds: [ID!]!
  isAvailable: Boolean
  isGospel: Boolean
}

input UpdateTrackInput {
  title: String
  genreId: ID
  subGenre: String
  cover: String
  url: String
  language: String
  lyric: String
  externalsIds: [String!]
  authorsIds: [ID!]
  isAvailable: Boolean
  isGospel: Boolean
  id: ID!
}

input CreatePlaylistInput {
  title: String!
  owner: ID!
  cover: String
  guestIds: [ID!]
  trackIds: [ID!]
}

input UpdatePlaylistInput {
  title: String
  owner: ID
  cover: String
  guestIds: [ID!]
  trackIds: [ID!]
  id: ID!
}

input CreateGuestInput {
  """ID del usuario que invita"""
  invitedById: ID!
}

input UpdateGuestInput {
  """ID del usuario que invita"""
  invitedById: ID
  id: ID!
}

input CreateRequestedTrackInput {
  requesterId: ID!
  trackId: ID!
  licenseType: LicenseType!
}

input UpdateRequestedTrackInput {
  requesterId: ID
  trackId: ID
  licenseType: LicenseType
  id: ID!
}

input CreateMusicalGenreInput {
  genre: String!
  subGenre: [String!]
}

input UpdateMusicalGenreInput {
  genre: String
  subGenre: [String!]
  id: ID!
}

input CreateIntellectualPropertyInput {
  title: String!
  trackId: ID!
  documentUrl: String!
}

input UpdateIntellectualPropertyInput {
  title: String
  trackId: ID
  documentUrl: String
  id: ID!
}